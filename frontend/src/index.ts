import { app, BrowserWindow, ipcMain } from 'electron';
import { net } from 'electron';
import { spawn, ChildProcess } from 'child_process';
import * as path from 'path';
import * as fs from 'fs';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Recorder process management
let recorderProcess: ChildProcess | null = null;
let isRecording = false;
let lastActivityTime = Date.now();

const startRecorderProcess = () => {
  // Clean up any stale process reference
  if (recorderProcess && recorderProcess.killed) {
    recorderProcess = null;
    isRecording = false;
  }
  
  if (recorderProcess) {
    return { success: false, message: 'Recorder already running' };
  }

  // Try to find the script path - in development it might be in a different location
  const possiblePaths = [
    path.join(__dirname, '../../recorder/transcribe_recorder.py'),
    path.join(process.cwd(), 'recorder/transcribe_recorder.py'),
    path.join(__dirname, '../../../recorder/transcribe_recorder.py')
  ];
  
  let scriptPath = null;
  for (const testPath of possiblePaths) {
    try {
      if (fs.existsSync(testPath)) {
        scriptPath = testPath;
        break;
      }
    } catch (e) {
      continue;
    }
  }
  
  if (!scriptPath) {
    return { success: false, message: 'Could not find transcribe_recorder.py script' };
  }
  
  console.log('Using script path:', scriptPath);
  console.log('Using working directory:', path.dirname(scriptPath));
  
  try {
    recorderProcess = spawn('/usr/bin/python3', [scriptPath], {
      stdio: ['pipe', 'pipe', 'pipe'],
      cwd: path.dirname(scriptPath),
      env: { ...process.env }
    });

    recorderProcess.stdout?.on('data', (data) => {
      const output = data.toString();
      console.log('[Recorder]:', output);
      
      // Send all transcript output to renderer for console.log
      BrowserWindow.getAllWindows().forEach(window => {
        window.webContents.send('recorder-log', {
          message: output.trim(),
          timestamp: Date.now()
        });
      });
      
      // Check for actual recording activity (audio events or transcription)
      if (output.includes('PARTIAL:') || output.includes('FINAL:') || output.includes('Event #') || output.includes('audio flowing')) {
        lastActivityTime = Date.now();
        // Send recording confirmation to UI (only once)
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('recorder-activity', {
            type: 'recording_active',
            timestamp: Date.now()
          });
        });
      }
      
      // Check for AWS transmission
      if (output.includes('ðŸ“¡ API Request sent')) {
        BrowserWindow.getAllWindows().forEach(window => {
          window.webContents.send('recorder-activity', {
            type: 'aws_transmission',
            timestamp: Date.now()
          });
        });
      }

      // Check for API response data
      if (output.includes('ðŸ”„ API_RESPONSE_DATA:')) {
        try {
          const jsonStart = output.indexOf('ðŸ”„ API_RESPONSE_DATA:') + 'ðŸ”„ API_RESPONSE_DATA:'.length;
          const jsonData = output.substring(jsonStart).trim();
          const responseData = JSON.parse(jsonData);
          
          // Send API response data to frontend
          BrowserWindow.getAllWindows().forEach(window => {
            window.webContents.send('api-response-data', responseData);
          });
        } catch (error) {
          console.error('Error parsing API response data:', error);
        }
      }
    });

    recorderProcess.stderr?.on('data', (data) => {
      const errorOutput = data.toString();
      
      // Filter out known AWS library cancellation errors that are harmless
      const harmlessErrors = [
        'InvalidStateError: CANCELLED:',
        'AWS_ERROR_UNKNOWN',
        'awscrt/http.py',
        'amazon_transcribe/httpsession.py',
        'concurrent.futures._base.py'
      ];
      
      const isHarmlessError = harmlessErrors.some(error => errorOutput.includes(error));
      
      if (!isHarmlessError) {
        console.error('[Recorder Error]:', errorOutput);
      }
    });

    recorderProcess.on('close', (code) => {
      console.log(`Recorder process exited with code ${code}`);
      recorderProcess = null;
      isRecording = false;
      
      // Notify renderer that process ended
      BrowserWindow.getAllWindows().forEach(window => {
        window.webContents.send('recorder-status', { 
          isRunning: false, 
          isRecording: false 
        });
      });
    });

    return { success: true, message: 'Recorder started' };
  } catch (error) {
    console.error('Failed to start recorder:', error);
    return { success: false, message: `Failed to start recorder: ${error}` };
  }
};

const stopRecorderProcess = () => {
  if (!recorderProcess) {
    return { success: false, message: 'No recorder process running' };
  }

  try {
    recorderProcess.kill('SIGTERM');
  } catch (error) {
    console.log('Error killing process:', error);
  }
  
  recorderProcess = null;
  isRecording = false;
  
  // Notify renderer of status change
  BrowserWindow.getAllWindows().forEach(window => {
    window.webContents.send('recorder-status', { 
      isRunning: false, 
      isRecording: false 
    });
  });
  
  return { success: true, message: 'Recorder stopped' };
};

const forceResetRecorderProcess = () => {
  if (recorderProcess) {
    try {
      recorderProcess.kill('SIGKILL');
    } catch (error) {
      console.log('Error force killing process:', error);
    }
  }
  
  recorderProcess = null;
  isRecording = false;
  
  // Notify renderer of status change
  BrowserWindow.getAllWindows().forEach(window => {
    window.webContents.send('recorder-status', { 
      isRunning: false, 
      isRecording: false 
    });
  });
  
  return { success: true, message: 'Recorder process reset' };
};

const sendRecorderCommand = (command: string) => {
  if (!recorderProcess || !recorderProcess.stdin) {
    return { success: false, message: 'Recorder not running' };
  }

  try {
    recorderProcess.stdin.write(command + '\n');
    
    if (command === 's') {
      isRecording = true;
    } else if (command === 'p') {
      isRecording = false;
    }
    
    // Notify renderer of status change
    BrowserWindow.getAllWindows().forEach(window => {
      window.webContents.send('recorder-status', { 
        isRunning: true, 
        isRecording: isRecording 
      });
    });
    
    return { success: true, message: `Command ${command} sent` };
  } catch (error) {
    return { success: false, message: `Failed to send command: ${error}` };
  }
};

// Recorder IPC handlers
ipcMain.handle('start-recorder', () => startRecorderProcess());
ipcMain.handle('stop-recorder', () => stopRecorderProcess());
ipcMain.handle('reset-recorder', () => forceResetRecorderProcess());
ipcMain.handle('send-recorder-command', (event, command: string) => sendRecorderCommand(command));
ipcMain.handle('get-recorder-status', () => ({
  isRunning: recorderProcess !== null && !recorderProcess.killed,
  isRecording: isRecording,
  lastActivity: lastActivityTime
}));

// API handler for customer info - register before app ready
ipcMain.handle('fetch-customer-info', async (event, email: string) => {
  const API_BASE_URL = 'https://kehpecxde2.execute-api.ap-southeast-2.amazonaws.com/default';
  const url = `${API_BASE_URL}/getCustomerInfo?email=${encodeURIComponent(email)}`;
  
  console.log('IPC handler called for email:', email);
  console.log('Fetching from URL:', url);
  
  return new Promise((resolve, reject) => {
    const request = net.request(url);
    
    request.on('response', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          
          if (response.statusCode === 200) {
            const parsedData = JSON.parse(data);
            resolve(parsedData);
          } else {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          }
        } catch (error) {
          console.error('Parse error:', error);
          reject(new Error('Failed to parse response'));
        }
      });
    });
    
    request.on('error', (error) => {
      console.error('Request error:', error);
      reject(error);
    });
    
    request.end();
  });
});

// API handler for tickets by name
ipcMain.handle('fetch-tickets-by-name', async (event, customerName: string, limit: number = 100) => {
  const API_BASE_URL = 'https://62wzl5xvn0.execute-api.ap-southeast-2.amazonaws.com/default';
  const url = `${API_BASE_URL}/getTicketByName`;
  
  console.log('IPC handler called for customer name:', customerName);
  console.log('Fetching from URL:', url);
  
  return new Promise((resolve, reject) => {
    const request = net.request({
      method: 'POST',
      url: url,
    });
    
    // Set headers
    request.setHeader('Content-Type', 'application/json');
    
    const requestBody = JSON.stringify({
      owner_name: customerName,
      limit: limit
    });
    
    request.on('response', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          
          if (response.statusCode === 200) {
            const parsedData = JSON.parse(data);
            resolve(parsedData);
          } else {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          }
        } catch (error) {
          console.error('Parse error:', error);
          reject(new Error('Failed to parse response'));
        }
      });
    });
    
    request.on('error', (error) => {
      console.error('Request error:', error);
      reject(error);
    });
    
    // Write the request body and end the request
    request.write(requestBody);
    request.end();
  });
});

// API handler for call history
ipcMain.handle('fetch-call-history', async (event) => {
  const url = 'https://nivbs8lrx3.execute-api.ap-southeast-2.amazonaws.com/default/getCallHistory';
  
  console.log('IPC handler called for call history');
  console.log('Fetching from URL:', url);
  
  return new Promise((resolve, reject) => {
    const request = net.request(url);
    
    request.on('response', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          
          if (response.statusCode === 200) {
            const parsedData = JSON.parse(data);
            resolve(parsedData);
          } else {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          }
        } catch (error) {
          console.error('Parse error:', error);
          reject(new Error('Failed to parse response'));
        }
      });
    });
    
    request.on('error', (error) => {
      console.error('Request error:', error);
      reject(error);
    });
    
    request.end();
  });
});

// API handler for DynamoDB polling
ipcMain.handle('fetch-dynamo-data', async (event) => {
  const url = 'https://dflfkwhyc0.execute-api.ap-southeast-2.amazonaws.com/default/pollDynamo';
  
  
  return new Promise((resolve, reject) => {
    const request = net.request(url);
    
    request.on('response', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          
          if (response.statusCode === 200) {
            const parsedData = JSON.parse(data);
            resolve(parsedData.latest_item);
          } else {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          }
        } catch (error) {
          console.error('Parse error:', error);
          reject(new Error('Failed to parse response'));
        }
      });
    });
    
    request.on('error', (error) => {
      console.error('Request error:', error);
      reject(error);
    });
    
    request.end();
  });
});

// API handler for sending email
ipcMain.handle('send-email', async (event, emailData: { to: string; subject: string; body: string }) => {
  const url = 'https://eigfrl49hf.execute-api.ap-southeast-2.amazonaws.com/default/sendEmail';
  
  console.log('IPC handler called for send email');
  console.log('Sending to URL:', url);
  console.log('Email data:', emailData);
  
  return new Promise((resolve, reject) => {
    const request = net.request({
      method: 'POST',
      url: url,
    });
    
    // Set headers
    request.setHeader('Content-Type', 'application/json');
    
    const requestBody = JSON.stringify(emailData);
    
    request.on('response', (response) => {
      let data = '';
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        try {
          
          if (response.statusCode === 200) {
            const parsedData = JSON.parse(data);
            resolve(parsedData);
          } else {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          }
        } catch (error) {
          console.error('Parse error:', error);
          reject(new Error('Failed to parse response'));
        }
      });
    });
    
    request.on('error', (error) => {
      console.error('Request error:', error);
      reject(error);
    });
    
    // Write the request body and end the request
    request.write(requestBody);
    request.end();
  });
});

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    title: 'Live Assist',
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
      webSecurity: false, // Disable CORS for API calls
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Configure Content Security Policy to allow AWS API connections
  const { session } = require('electron');
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-inline' 'unsafe-eval' data:; connect-src 'self' https://*.execute-api.ap-southeast-2.amazonaws.com ws: wss:"
        ]
      }
    });
  });
  
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
